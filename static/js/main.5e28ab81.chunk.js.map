{"version":3,"sources":["components/ExchangeHeader/logo.svg","components/ExchangeHeader/ExchangeHeader.jsx","components/functions.js","components/AccountBalance/AccountBalance.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","styled","header","Img","img","H1","h1","ExchangeHeader","src","logo","alt","Component","formatter","Intl","NumberFormat","style","currency","Section","section","Balance","div","Button","button","BalanceToggleButton","AccountBalance","props","buttonText","showBalance","buttonClass","content","Fragment","format","amount","className","onClick","handleBalanceVisibility","handleHelicopterMoney","Td","td","TdName","TdTicker","TdControls","Coin","name","ticker","price","balance","action","method","event","preventDefault","handleRefresh","tickerID","handleTransaction","Table","table","CoinList","coinData","map","key","Div","tickersUrl","App","useState","setBalance","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIDs","data","slice","coin","id","promises","Promise","all","responses","symbol","quotes","USD","useEffect","length","tickerUrl","newPrice","newCoinData","newCoin","oldValue","isBuy","balanceChange","oldBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e28ab81.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport logo from './logo.svg';\r\n\r\nconst Header = styled.header`\r\n  background-color: #282c34;\r\n  min-height: 10vh;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row; /* Column -> items stacked atop of each other*/\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  font-size: 36px;\r\n  /* font-size: calc(10px + 2vmin); */\r\n  color: white;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  height: 8rem;\r\n  pointer-events: none;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n  font-size: 3rem;\r\n  line-height: 8rem;\r\n  fold-weight: bold;\r\n  min-width: 300px;\r\n`;\r\n\r\nexport default class ExchangeHeader extends Component {\r\n    render() {\r\n      return (\r\n        <Header>\r\n          <Img src={logo} alt=\"React logo\"/>\r\n          <H1>\r\n            Coin Exchange\r\n          </H1>\r\n        </Header>\r\n        )\r\n    }\r\n}\r\n","export var formatter = Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD'\r\n});\r\n\r\n// const formatPrice = price => parseFloat(Number(price).toFixed(4));","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { formatter } from \"../functions\";\r\n\r\nconst Section = styled.section`\r\n    font-size: 2rem;\r\n    text-align: center;\r\n    margin-bottom: 2rem;\r\n    line-height: 3rem \r\n    display: inline-block;\r\n`;\r\n\r\nconst Balance = styled.div`\r\n    min-width: 250px;\r\n    margin: 0.5rem 0 0 2.5rem;\r\n    font-size: 1.5rem;\r\n    vertical-align: middle;\r\n    text-align: left;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    margin 0 8px;\r\n`;\r\n\r\nconst BalanceToggleButton = styled(Button)`\r\n    width 150px;\r\n`;\r\n\r\nexport default function AccountBalance(props) {\r\n\r\n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\r\n    const buttonClass = 'btn ' + (props.showBalance ? 'btn-warning' : 'btn-info');\r\n    let content = '\\u00A0'; // Placeholder for content. Ensure no flipping when hiding and showing balance.\r\n    if (props.showBalance) {\r\n        content = <React.Fragment> Balance: {formatter.format(props.amount)} </React.Fragment>;\r\n    };\r\n    return (\r\n        <>\r\n            <Balance>{content}</Balance>\r\n            <Section>\r\n                <BalanceToggleButton \r\n                    className={buttonClass}\r\n                    onClick={props.handleBalanceVisibility}>\r\n                    {buttonText}\r\n                </BalanceToggleButton>\r\n                <Button \r\n                    className=\"btn btn-success\"\r\n                    onClick={props.handleHelicopterMoney}>\r\n                    <i className=\"fas fa-helicopter\"></i>\r\n                </Button>\r\n            </Section>\r\n        </>\r\n    );\r\n};\r\n\r\nAccountBalance.propTypes = {\r\n    amount: propTypes.number.isRequired\r\n};","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { formatter } from \"../functions\";\r\n\r\nconst Td = styled.td`\r\n    border: 1px solid #cccccc;\r\n    width: 14vw;\r\n`;\r\n\r\nconst TdName = styled(Td)`\r\n    width: 20vw;\r\n`;\r\n\r\nconst TdTicker = styled(Td)`\r\n    width: 10vw;\r\n`;\r\n\r\nconst TdControls = styled(Td)`\r\n    width: 25vw;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    font-size: 11px;\r\n    width: 64px;\r\n    margin 3px 5px 0;\r\n`;\r\n\r\nexport default function Coin(props) {\r\n   \r\n    const handleRefresh = (event) => {\r\n        // Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.handleRefresh(props.tickerID);\r\n    };\r\n\r\n    const handleBuy = (event) => {\r\n        // Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.handleTransaction(true, props.tickerID);\r\n    };\r\n\r\n    const handleSell = (event) => {\r\n        // Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.handleTransaction(false, props.tickerID);\r\n    };\r\n\r\n    return (\r\n        <tr>\r\n            <TdName>{props.name}</TdName>\r\n            <TdTicker>{props.ticker}</TdTicker>\r\n            <Td>{formatter.format(props.price)}</Td>\r\n            <Td>{props.showBalance ? formatter.format(props.balance) : '-'}</Td>\r\n            <TdControls>\r\n                <form action=\"#\" method=\"POST\">\r\n                    <Button className=\"btn btn-info\" onClick={handleRefresh}>\r\n                        Refresh\r\n                    </Button>\r\n                    <Button className=\"btn btn-success\" onClick={handleBuy}>\r\n                        Buy\r\n                    </Button>\r\n                    <Button className=\"btn btn-danger\" onClick={handleSell}>\r\n                        Sell\r\n                    </Button>\r\n                </form>\r\n            </TdControls>\r\n        </tr>\r\n    );\r\n};\r\n\r\nCoin.propTypes = {\r\n    name: propTypes.string.isRequired,\r\n    ticker: propTypes.string.isRequired,\r\n    price: propTypes.number.isRequired\r\n};","import React from 'react'\r\nimport Coin from '../Coin/Coin';\r\nimport styled from 'styled-components';\r\n\r\nconst Table = styled.table`\r\n  margin-bottom: 50px;\r\n  display: inline-block;\r\n  width: 80%;\r\n  font-size: 1rem;\r\n`;\r\n\r\nexport default function CoinList(props) {\r\n  return (\r\n    <Table className='table table-primary table-bordered'>\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Ticker</th>\r\n          <th>Price</th>\r\n          <th>Balance</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n          {\r\n            // key values is needed for optimally rendering in react. \r\n            props.coinData.map( ({key, name, ticker, price, balance}) =>\r\n              <Coin key={key}\r\n                    handleRefresh={props.handleRefresh}\r\n                    handleTransaction={props.handleTransaction}\r\n                    name={name}\r\n                    ticker={ticker}\r\n                    balance={balance}\r\n                    price={price}\r\n                    showBalance={props.showBalance}\r\n                    tickerID={key} />\r\n            )\r\n          }\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\r\nimport AccountBalance from './components/AccountBalance/AccountBalance';\r\nimport CoinList from './components/CoinList/CoinList';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\n\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootswatch/dist/flatly/bootstrap.min.css';\r\nimport '@fortawesome/fontawesome-free/js/all';\r\n\r\nconst Div = styled.div`\r\n  text-align: center;\r\n  background-color: #1f3ea3;\r\n  color: #cccccc;\r\n`;\r\n\r\nconst COIN_COUNT = 10;\r\nconst coinsUrl = 'https://api.coinpaprika.com/v1/coins';\r\nconst tickersUrl = 'https://api.coinpaprika.com/v1/tickers/';\r\nconst coinPaprikaRateLimit = 10; //Single IP address can send less than 10 requests per second\r\n\r\nfunction App() {\r\n  // This is use-state hooks\r\n  const [balance, setBalance] = useState(10000);\r\n  const [showBalance, setShowBalance] = useState(false);\r\n  const [coinData, setCoinData] = useState([]);\r\n\r\n  const componentDidMount = async() => {\r\n    // Retrieve ticker from coinpaprika\r\n    const response = await axios.get(coinsUrl)\r\n    let coinIDs = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\r\n\r\n    // Retrieve prices from coinpaprika\r\n    const promises = coinIDs.map(id => axios.get(tickersUrl + id));\r\n    const responses = await Promise.all(promises);\r\n    const coinData = responses.map(function(response){\r\n      const coin = response.data;\r\n      return {\r\n        key: coin.id,\r\n        name: coin.name,\r\n        ticker: coin.symbol,\r\n        balance: 0,\r\n        price: coin.quotes.USD.price,\r\n      };\r\n    });\r\n    setCoinData(coinData);\r\n  }; \r\n\r\n  useEffect(function () {\r\n    if (coinData.length === 0) {\r\n      // In componentDidMount situation\r\n      componentDidMount();\r\n    } else {\r\n      // In componentDidUpdate situation\r\n    }\r\n  })\r\n\r\n  const handleBalanceVisibility = () => {\r\n    setShowBalance(oldValue => !oldValue)\r\n  }\r\n  \r\n  const handleHelicopterMoney = () => {\r\n    setBalance(balance + 1000)\r\n  }\r\n\r\n  const handleTransaction = (isBuy, tickerID) => {\r\n    var balanceChange = isBuy ? 1 : -1;\r\n    const newCoinData = coinData.map(function (coin) {\r\n      let newCoin = {...coin};\r\n      if(tickerID === coin.key){\r\n        newCoin.balance += balanceChange;\r\n        setBalance(oldBalance => oldBalance - balanceChange * coin.price);\r\n      }\r\n      return newCoin\r\n    });\r\n    setCoinData(newCoinData);\r\n  }\r\n\r\n  const handleRefresh = async(tickerID) => {\r\n    const tickerUrl = tickersUrl + tickerID;\r\n    const response = await axios.get(tickerUrl);\r\n    const newPrice = response.data.quotes.USD.price;\r\n    const newCoinData = coinData.map( coin => {\r\n      let newCoin = {...coin}; // This is shallow copy of the values\r\n      if(coin.key === tickerID){\r\n        newCoin.price = newPrice;\r\n      };\r\n      return newCoin;\r\n    });\r\n    setCoinData(newCoinData);\r\n  }\r\n\r\n  return (\r\n    <Div>\r\n      <ExchangeHeader />\r\n      <AccountBalance \r\n        amount={balance} \r\n        showBalance={showBalance} \r\n        handleBalanceVisibility={handleBalanceVisibility}\r\n        handleHelicopterMoney={handleHelicopterMoney}/>\r\n      <CoinList \r\n        coinData={coinData} \r\n        handleRefresh={handleRefresh}\r\n        handleTransaction={handleTransaction}\r\n        showBalance={showBalance}/>\r\n    </Div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}