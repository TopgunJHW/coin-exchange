{"version":3,"sources":["components/ExchangeHeader/logo.svg","components/ExchangeHeader/ExchangeHeader.jsx","components/functions.js","components/AccountBalance/AccountBalance.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","styled","header","Img","img","H1","h1","ExchangeHeader","src","logo","alt","Component","formatter","Intl","NumberFormat","style","currency","formatterMarketCap","maximumFractionDigits","formatterCoin","Section","section","Balance","div","Button","button","BalanceToggleButton","AccountBalance","props","buttonText","showBalance","buttonClass","content","Fragment","format","amount","className","onClick","handleBalanceVisibility","handleHelicopterMoney","TdRank","td","Td","TdName","TdTicker","TdCurrency","TdControls","Coin","rank","name","ticker","price","marketCap","balance","action","method","event","preventDefault","handleRefresh","tickerID","handleTransaction","Table","table","CoinList","coinData","map","index","key","Div","tickersUrl","App","useState","setBalance","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","array","data","sortedResponse","sort","b","slicedResponse","slice","coin","id","symbol","quotes","USD","market_cap","useEffect","length","tickerUrl","newPrice","newCoinData","newCoin","oldValue","isBuy","balanceChange","oldBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.617afcb1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport logo from './logo.svg';\r\n\r\nconst Header = styled.header`\r\n  background-color: #282c34;\r\n  min-height: 10vh;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row; /* Column -> items stacked atop of each other*/\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  font-size: 36px;\r\n  /* font-size: calc(10px + 2vmin); */\r\n  color: white;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  height: 8rem;\r\n  pointer-events: none;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n  font-size: 3rem;\r\n  line-height: 8rem;\r\n  fold-weight: bold;\r\n  min-width: 300px;\r\n`;\r\n\r\nexport default class ExchangeHeader extends Component {\r\n    render() {\r\n      return (\r\n        <Header>\r\n          <Img src={logo} alt=\"React logo\"/>\r\n          <H1>\r\n            Coin Exchange\r\n          </H1>\r\n        </Header>\r\n        )\r\n    }\r\n}\r\n","export var formatter = Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n});\r\n\r\nexport var formatterMarketCap = Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    maximumFractionDigits: 0\r\n});\r\n\r\nexport var formatterCoin = Intl.NumberFormat('en-US', {\r\n    style: 'decimal',\r\n    // minimumSignificantDigits: 3,\r\n    // maximumSignificantDigits: 7\r\n});\r\n\r\n// const formatPrice = price => parseFloat(Number(price).toFixed(4));\r\n\r\nexport function SortArrayOfObjects(array) {\r\n\r\n    function compare(a, b){\r\n        if (a.rank < b.rank){\r\n            return -1;\r\n        };\r\n        if (a.rank > b.rank){\r\n            return 1;\r\n        };\r\n        return 0;\r\n    };\r\n    return array.sort(compare);\r\n} ","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { formatter } from \"../functions\";\r\n\r\nconst Section = styled.section`\r\n    font-size: 2rem;\r\n    text-align: center;\r\n    margin-bottom: 2rem;\r\n    line-height: 3rem \r\n    display: inline-block;\r\n`;\r\n\r\nconst Balance = styled.div`\r\n    min-width: 250px;\r\n    margin: 0.5rem 0 0 2.5rem;\r\n    font-size: 1.5rem;\r\n    vertical-align: middle;\r\n    text-align: left;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    margin 0 8px;\r\n`;\r\n\r\nconst BalanceToggleButton = styled(Button)`\r\n    width 150px;\r\n`;\r\n\r\nexport default function AccountBalance(props) {\r\n\r\n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\r\n    const buttonClass = 'btn ' + (props.showBalance ? 'btn-warning' : 'btn-info');\r\n    let content = '\\u00A0'; // Placeholder for content. Ensure no flipping when hiding and showing balance.\r\n    if (props.showBalance) {\r\n        content = <React.Fragment> Balance: {formatter.format(props.amount)} </React.Fragment>;\r\n    };\r\n    return (\r\n        <>\r\n            <Balance>{content}</Balance>\r\n            <Section>\r\n                <BalanceToggleButton \r\n                    className={buttonClass}\r\n                    onClick={props.handleBalanceVisibility}>\r\n                    {buttonText}\r\n                </BalanceToggleButton>\r\n                <Button \r\n                    className=\"btn btn-success\"\r\n                    onClick={props.handleHelicopterMoney}>\r\n                    <i className=\"fas fa-helicopter\"></i>\r\n                </Button>\r\n            </Section>\r\n        </>\r\n    );\r\n};\r\n\r\nAccountBalance.propTypes = {\r\n    amount: propTypes.number.isRequired\r\n};","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { formatter, formatterMarketCap, formatterCoin } from \"../functions\";\r\n\r\nconst TdRank = styled.td`\r\n    border: 1px solid #cccccc;\r\n    width: 5vw;\r\n`;\r\nconst Td = styled.td`\r\n    border: 1px solid #cccccc;\r\n    width: 14vw;\r\n`;\r\n\r\nconst TdName = styled(Td)`\r\n    width: 20vw;\r\n`;\r\n\r\nconst TdTicker = styled(Td)`\r\n    width: 10vw;\r\n`;\r\n\r\nconst TdCurrency = styled.td`\r\n    border: 1px solid #cccccc;\r\n    width: 14vw;\r\n    text-align: right;\r\n`;\r\n\r\nconst TdControls = styled(Td)`\r\n    width: 25vw;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    font-size: 11px;\r\n    width: 64px;\r\n    margin 3px 5px 0;\r\n`;\r\n\r\nexport default function Coin(props) {\r\n   \r\n    const handleRefresh = (event) => {\r\n        // Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.handleRefresh(props.tickerID);\r\n    };\r\n\r\n    const handleBuy = (event) => {\r\n        // Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.handleTransaction(true, props.tickerID);\r\n    };\r\n\r\n    const handleSell = (event) => {\r\n        // Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.handleTransaction(false, props.tickerID);\r\n    };\r\n\r\n    return (\r\n        <tr>\r\n            <TdRank>{props.rank + 1}</TdRank>\r\n            <TdName>{props.name}</TdName>\r\n            <TdTicker>{props.ticker}</TdTicker>\r\n            <TdCurrency>{formatter.format(props.price)}</TdCurrency>\r\n            <TdCurrency>{formatterMarketCap.format(props.marketCap)}</TdCurrency>\r\n            <TdCurrency>{props.showBalance ? formatterCoin.format(props.balance) : '-'}</TdCurrency>\r\n            <TdControls>\r\n                <form action=\"#\" method=\"POST\">\r\n                    <Button className=\"btn btn-info\" onClick={handleRefresh}>\r\n                        Refresh\r\n                    </Button>\r\n                    <Button className=\"btn btn-success\" onClick={handleBuy}>\r\n                        Buy\r\n                    </Button>\r\n                    <Button className=\"btn btn-danger\" onClick={handleSell}>\r\n                        Sell\r\n                    </Button>\r\n                </form>\r\n            </TdControls>\r\n        </tr>\r\n    );\r\n};\r\n\r\nCoin.propTypes = {\r\n    name: propTypes.string.isRequired,\r\n    ticker: propTypes.string.isRequired,\r\n    price: propTypes.number.isRequired\r\n};","import React from 'react'\r\nimport Coin from '../Coin/Coin';\r\nimport styled from 'styled-components';\r\n\r\nconst Table = styled.table`\r\n  margin-bottom: 50px;\r\n  display: inline-block;\r\n  width: 80%;\r\n  font-size: 1rem;\r\n`;\r\n\r\nexport default function CoinList(props) {\r\n  return (\r\n    <Table className='table table-primary table-bordered'>\r\n      <thead>\r\n        <tr>\r\n          <th>#</th>\r\n          <th>Name</th>\r\n          <th>Ticker</th>\r\n          <th>Price</th>\r\n          <th>Market Cap</th>\r\n          <th>Balance</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n          {\r\n            // key values is needed for optimally rendering in react. \r\n            props.coinData.map( ({key, name, ticker, price, marketCap, balance}, index) =>\r\n              <Coin key={key}\r\n                    handleRefresh={props.handleRefresh}\r\n                    handleTransaction={props.handleTransaction}\r\n                    name={name}\r\n                    ticker={ticker}\r\n                    balance={balance}\r\n                    price={price}\r\n                    marketCap={marketCap}\r\n                    showBalance={props.showBalance}\r\n                    tickerID={key}\r\n                    rank={index} />\r\n            )\r\n          }\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\r\nimport AccountBalance from './components/AccountBalance/AccountBalance';\r\nimport CoinList from './components/CoinList/CoinList';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport {SortArrayOfObjects} from './components/functions'\r\n\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootswatch/dist/flatly/bootstrap.min.css';\r\nimport '@fortawesome/fontawesome-free/js/all';\r\n\r\nconst Div = styled.div`\r\n  text-align: center;\r\n  background-color: #1f3ea3;\r\n  color: #cccccc;\r\n`;\r\n\r\nconst COIN_COUNT = 100;\r\nconst tickersUrl = 'https://api.coinpaprika.com/v1/tickers/';\r\n\r\nfunction App() {\r\n  // This is use-state hooks\r\n  const [balance, setBalance] = useState(10000);\r\n  const [showBalance, setShowBalance] = useState(false);\r\n  const [coinData, setCoinData] = useState([]);\r\n\r\n  const componentDidMount = async() => {\r\n    // // Retrieve ticker from coinpaprika\r\n    // const response = await axios.get(coinsUrl)\r\n    // let coinIDs = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\r\n\r\n    // // Retrieve prices from coinpaprika\r\n    // const promises = coinIDs.map(id => axios.get(tickersUrl + id));\r\n    // const responses = await Promise.all(promises);\r\n    // const coinData = responses.map(function(response){\r\n    //   const coin = response.data;\r\n    //   return {\r\n    //     key: coin.id,\r\n    //     name: coin.name,\r\n    //     ticker: coin.symbol,\r\n    //     balance: 0,\r\n    //     price: coin.quotes.USD.price,\r\n    //   };\r\n    // });\r\n    // setCoinData(coinData);\r\n\r\n    const response = await axios.get(tickersUrl);\r\n    const sortedResponse = SortArrayOfObjects(response.data);\r\n    const slicedResponse = sortedResponse.slice(0, COIN_COUNT);\r\n    const coinData = slicedResponse.map(function(coin){\r\n      return {\r\n        key: coin.id,\r\n        name: coin.name,\r\n        ticker: coin.symbol,\r\n        balance: 0,\r\n        price: coin.quotes.USD.price,\r\n        marketCap: coin.quotes.USD.market_cap\r\n      };\r\n    });\r\n    setCoinData(coinData);\r\n  }; \r\n\r\n  useEffect(function () {\r\n    if (coinData.length === 0) {\r\n      // In componentDidMount situation\r\n      componentDidMount();\r\n    } else {\r\n      // In componentDidUpdate situation\r\n    }\r\n  })\r\n\r\n  const handleBalanceVisibility = () => {\r\n    setShowBalance(oldValue => !oldValue)\r\n  }\r\n  \r\n  const handleHelicopterMoney = () => {\r\n    setBalance(balance + 1000)\r\n  }\r\n\r\n  const handleTransaction = (isBuy, tickerID) => {\r\n    var balanceChange = isBuy ? 1 : -1;\r\n    const newCoinData = coinData.map(function (coin) {\r\n      let newCoin = {...coin};\r\n      if(tickerID === coin.key){\r\n        newCoin.balance += balanceChange;\r\n        setBalance(oldBalance => oldBalance - balanceChange * coin.price);\r\n      }\r\n      return newCoin\r\n    });\r\n    setCoinData(newCoinData);\r\n  }\r\n\r\n  const handleRefresh = async(tickerID) => {\r\n    const tickerUrl = tickersUrl + tickerID;\r\n    const response = await axios.get(tickerUrl);\r\n    const newPrice = response.data.quotes.USD.price;\r\n    const newCoinData = coinData.map( coin => {\r\n      let newCoin = {...coin}; // This is shallow copy of the values\r\n      if(coin.key === tickerID){\r\n        newCoin.price = newPrice;\r\n      };\r\n      return newCoin;\r\n    });\r\n    setCoinData(newCoinData);\r\n  }\r\n\r\n  return (\r\n    <Div>\r\n      <ExchangeHeader />\r\n      <AccountBalance \r\n        amount={balance} \r\n        showBalance={showBalance} \r\n        handleBalanceVisibility={handleBalanceVisibility}\r\n        handleHelicopterMoney={handleHelicopterMoney}/>\r\n      <CoinList \r\n        coinData={coinData} \r\n        handleRefresh={handleRefresh}\r\n        handleTransaction={handleTransaction}\r\n        showBalance={showBalance}/>\r\n    </Div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}